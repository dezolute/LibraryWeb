import { useEffect, useState } from 'react';
import { Table, Tag, Typography, Spin, Modal, Select, message } from 'antd';
import { CONFIG } from '../constants/config';

const { Title } = Typography;
const apiUrl = CONFIG.API_URL;
const accessToken = localStorage.getItem('access_token');
const statusOptions = ['GIVEN', 'RETURNED'];

const EmployeeRequestsPage = () => {
  const [requests, setRequests] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchRequests = async () => {
      if (!accessToken) {
        Modal.warning({
          title: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞',
          content: '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.',
        });
        setLoading(false);
        return;
      }

      try {
        const userRes = await fetch(`${apiUrl}/users/me`, {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
        });

        if (!userRes.ok) throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

        const user = await userRes.json();
        const role = user.role;

        if (role !== 'EMPLOYEE' && role !== 'ADMIN') {
          Modal.warning({
            title: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤',
            content: '–≠—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.',
          });
          setLoading(false);
          return;
        }

        const response = await fetch(`${apiUrl}/requests`, {
          headers: {
            Authorization: `Bearer ${accessToken}`,
            'Content-Type': 'application/json',
          },
        });

        if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤');

        const data = await response.json();
        setRequests(data.items || []);
      } catch (error) {
        Modal.error({
          title: '–û—à–∏–±–∫–∞',
          content: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.',
        });
      } finally {
        setLoading(false);
      }
    };

    fetchRequests();
  }, []);

  const handleStatusChange = async (requestId, newStatus) => {
    try {
      const response = await fetch(`${apiUrl}/requests/${requestId}?new_status=${newStatus}`, {
        method: 'PATCH',
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      });

      if (!response.ok) throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');

      message.success('–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω');
      setRequests((prev) =>
        prev.map((req) =>
          req.id === requestId ? { ...req, status: newStatus } : req
        )
      );
    } catch (error) {
      message.error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å');
    }
  };

  const columns = [
    {
      title: 'ID –∑–∞–ø—Ä–æ—Å–∞',
      dataIndex: 'id',
      key: 'id',
    },
    {
      title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      dataIndex: ['user', 'name'],
      key: 'user',
      render: (_, record) => (
        <div>
          <strong>{record.user.name}</strong>
          <br />
          <span>{record.user.email}</span>
        </div>
      ),
    },
    {
      title: '–ö–Ω–∏–≥–∞',
      dataIndex: ['book', 'title'],
      key: 'book',
      render: (_, record) => (
        <div>
          <strong>{record.book.title}</strong>
          <br />
          <span>{record.book.author} ({record.book.year_publication})</span>
        </div>
      ),
    },
    {
      title: '–°—Ç–∞—Ç—É—Å',
      dataIndex: 'status',
      key: 'status',
      render: (status, record) => (
        <Select
          value={status}
          onChange={(value) => handleStatusChange(record.id, value)}
          style={{ width: 120 }}
          options={statusOptions.map((s) => ({
            label: s,
            value: s,
          }))}
        />
      ),
    },
    {
      title: '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç',
      dataIndex: ['book', 'priority'],
      key: 'priority',
      render: (priority) => {
        const color = priority === 'HIGH' ? 'red' : 'default';
        return <Tag color={color}>{priority}</Tag>;
      },
    },
    {
      title: '–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞',
      dataIndex: 'created_at',
      key: 'created_at',
      render: (date) => new Date(date).toLocaleString('ru-RU'),
    },
  ];

  if (loading) return <Spin tip="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤..." />;

  return (
    <div style={{ padding: '40px' }}>
      <Title level={3}>üìö –ó–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</Title>
      <Table
        dataSource={requests}
        columns={columns}
        rowKey="id"
        pagination={{ pageSize: 20 }}
      />
    </div>
  );
};

export default EmployeeRequestsPage;
